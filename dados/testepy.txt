Neste teste técnico, você será solicitado a implementar uma API utilizando Python, Flask e MySQL para realizar operações CRUDS (Create, Read, Update, Delete, Search) em uma lista de contatos.

Descrição para a criação do banco:
Crie uma um banco com uma única tabela ,chamada "contato", apartir do arquivo "TesteAxya.csv" enviado junto com o teste

Descrição da API e suas funcionalidades:

- Create:
A API deve receber uma solicitação com os seguintes campos do contato:
Nome (máximo de 100 caracteres)
Sobrenome (máximo de 100 caracteres)
Email (máximo de 100 caracteres)
Telefone (máximo de 20 caracteres)
A API deve retornar a resposta com o ID do contato criado.

- Read:
A API deve receber uma solicitação com o ID de um contato e retornar as informações detalhadas do contato.

- Update:
A API deve receber uma solicitação com o ID do contato a ser atualizado e os campos a serem modificados (nome, email e telefone).

- Delete:
A API deve receber uma solicitação com o ID de um contato e permitir a exclusão do mesmo.

- Search:
A API deve receber parte de um nome e retornar os possiveis para aquele contato pesquisado.

Utilize preferencialmente o framework Flask para a criação das rotas e as operações de CRUDS no banco de dados MySQL.
Para a conexão e interação com o banco de dados MySQL, utilize preferencialmente a biblioteca Flask-MySQL.
Crie e descreva os testes utilizados para verificar o funcionamento da API.

Instruções adicionais:
*IMPORTANTE* Crie um README detalhado com as instruções para configurar o ambiente de desenvolvimento, instalar as dependências e executar a API localmente.
Sugerido utilizar um ambiente virtual e gerenciar as dependências do projeto (Poetry,venv ou virtual env).
Considere a melhor forma de estruturar o código da API, utilizando boas práticas de desenvolvimento.

Instruções para submissão:
Ao finalizar o teste, crie um repositório no Git (por exemplo, GitHub, GitLab) contendo o código-fonte da API, bem como o README detalhado. Envie o link do repositório para a equipe responsável.
